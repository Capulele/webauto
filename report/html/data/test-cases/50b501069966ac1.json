{"uid":"50b501069966ac1","name":"test_01_login[admin1-11111111-登录失败]","fullName":"testcases.test_user_manager.test_login.TestLogin#test_01_login","historyId":"3e5201c0d1db86d6ec0dd9d1c299504c","time":{"start":1675070951680,"stop":1675070971521,"duration":19841},"status":"broken","statusMessage":"FileNotFoundError: [Errno 2] No such file or directory: './report/screenshot/houseinfofail.png'","statusTrace":"self = <test_login.TestLogin object at 0x000001F36A470E20>, username = 'admin1'\npassword = 11111111, except_res = '登录失败'\n\n    @allure.story('登录功能验证')\n    @pytest.mark.parametrize('username,password,except_res' , load_user_yaml(userdata_path))\n    def test_01_login(self , username , password , except_res):\n    \tdriver=BasePage().driver\n    \tload_log().info('测试用户名{},密码{}'.format(username , password))\n    \tresult = UserLogin().userlogin(username , password)\n    \twith allure.step('执行断言'):\n    \t\ttry:\n    \t\t\tassert result == except_res\n    \t\t\tload_log().info('实际结果\"{}\"与预期结果\"{}\"一致'.format(result , except_res))\n    \t\t\tdriver.save_screenshot('./report/screenshot/houseinfofail.png')\n>   \t\t\tallure.attach.file('./report/screenshot/houseinfofail.png',attachment_type = allure.attachment_type.PNG)\n\ntestcases\\test_user_manager\\test_login.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons._allure.Attach object at 0x000001F3688281F0>\nsource = './report/screenshot/houseinfofail.png', name = None\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\n\n    def file(self, source, name=None, attachment_type=None, extension=None):\n>       plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n\nvenv\\lib\\site-packages\\allure_commons\\_allure.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_HookCaller 'attach_file'>, args = ()\nkwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './report/screenshot/houseinfofail.png'}\nargname = 'extension', firstresult = False\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\nvenv\\lib\\site-packages\\pluggy\\_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._manager.PluginManager object at 0x000001F368849CF0>\nhook_name = 'attach_file'\nmethods = [<HookImpl plugin_name='2144942744352', plugin=<allure_pytest.listener.AllureListener object at 0x000001F3688CE320>>]\nkwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\nvenv\\lib\\site-packages\\pluggy\\_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'attach_file'\nhook_impls = [<HookImpl plugin_name='2144942744352', plugin=<allure_pytest.listener.AllureListener object at 0x000001F3688CE320>>]\ncaller_kwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\nvenv\\lib\\site-packages\\pluggy\\_callers.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._result._Result object at 0x000001F36AE7DF30>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n>           raise ex[1].with_traceback(ex[2])\n\nvenv\\lib\\site-packages\\pluggy\\_result.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'attach_file'\nhook_impls = [<HookImpl plugin_name='2144942744352', plugin=<allure_pytest.listener.AllureListener object at 0x000001F3688CE320>>]\ncaller_kwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\nvenv\\lib\\site-packages\\pluggy\\_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_pytest.listener.AllureListener object at 0x000001F3688CE320>\nsource = './report/screenshot/houseinfofail.png', name = None\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\n\n    @allure_commons.hookimpl\n    def attach_file(self, source, name, attachment_type, extension):\n>       self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n\nvenv\\lib\\site-packages\\allure_pytest\\listener.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.reporter.AllureReporter object at 0x000001F3688CE350>\nuuid = '342b36cc-4aea-4e53-92e2-b384af581d44'\nsource = './report/screenshot/houseinfofail.png', name = None\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\nparent_uuid = None\n\n    def attach_file(self, uuid, source, name=None, attachment_type=None, extension=None, parent_uuid=None):\n        file_name = self._attach(uuid, name=name, attachment_type=attachment_type,\n                                 extension=extension, parent_uuid=parent_uuid)\n>       plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n\nvenv\\lib\\site-packages\\allure_commons\\reporter.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_HookCaller 'report_attached_file'>, args = ()\nkwargs = {'file_name': '342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png', 'source': './report/screenshot/houseinfofail.png'}\nargname = 'file_name', firstresult = False\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\nvenv\\lib\\site-packages\\pluggy\\_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._manager.PluginManager object at 0x000001F368849CF0>\nhook_name = 'report_attached_file'\nmethods = [<HookImpl plugin_name='2144942196048', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001F368848550>>]\nkwargs = {'file_name': '342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png', 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\nvenv\\lib\\site-packages\\pluggy\\_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'report_attached_file'\nhook_impls = [<HookImpl plugin_name='2144942196048', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001F368848550>>]\ncaller_kwargs = {'file_name': '342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png', 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\nvenv\\lib\\site-packages\\pluggy\\_callers.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._result._Result object at 0x000001F36AE7DE40>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n>           raise ex[1].with_traceback(ex[2])\n\nvenv\\lib\\site-packages\\pluggy\\_result.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'report_attached_file'\nhook_impls = [<HookImpl plugin_name='2144942196048', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001F368848550>>]\ncaller_kwargs = {'file_name': '342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png', 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\nvenv\\lib\\site-packages\\pluggy\\_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.logger.AllureFileLogger object at 0x000001F368848550>\nsource = './report/screenshot/houseinfofail.png'\nfile_name = '342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png'\n\n    @hookimpl\n    def report_attached_file(self, source, file_name):\n        destination = os.path.join(self._report_dir, file_name)\n>       shutil.copy2(source, destination)\n\nvenv\\lib\\site-packages\\allure_commons\\logger.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = './report/screenshot/houseinfofail.png'\ndst = 'D:\\\\desktop\\\\web自动化\\\\report\\\\result\\\\342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png'\n\n    def copy2(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data and metadata. Return the file's destination.\n    \n        Metadata is copied with copystat(). Please see the copystat function\n        for more information.\n    \n        The destination may be a directory.\n    \n        If follow_symlinks is false, symlinks won't be followed. This\n        resembles GNU's \"cp -P src dst\".\n        \"\"\"\n        if os.path.isdir(dst):\n            dst = os.path.join(dst, os.path.basename(src))\n>       copyfile(src, dst, follow_symlinks=follow_symlinks)\n\nD:\\Program Files\\python3.10\\lib\\shutil.py:434: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = './report/screenshot/houseinfofail.png'\ndst = 'D:\\\\desktop\\\\web自动化\\\\report\\\\result\\\\342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: './report/screenshot/houseinfofail.png'\n\nD:\\Program Files\\python3.10\\lib\\shutil.py:254: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_login.TestLogin object at 0x000001F36A470E20>, username = 'admin1'\npassword = 11111111, except_res = '登录失败'\n\n    @allure.story('登录功能验证')\n    @pytest.mark.parametrize('username,password,except_res' , load_user_yaml(userdata_path))\n    def test_01_login(self , username , password , except_res):\n    \tdriver=BasePage().driver\n    \tload_log().info('测试用户名{},密码{}'.format(username , password))\n    \tresult = UserLogin().userlogin(username , password)\n    \twith allure.step('执行断言'):\n    \t\ttry:\n    \t\t\tassert result == except_res\n    \t\t\tload_log().info('实际结果\"{}\"与预期结果\"{}\"一致'.format(result , except_res))\n    \t\t\tdriver.save_screenshot('./report/screenshot/houseinfofail.png')\n    \t\t\tallure.attach.file('./report/screenshot/houseinfofail.png',attachment_type = allure.attachment_type.PNG)\n    \n    \t\texcept:\n    \n    \t\t\tdriver.save_screenshot('./report/screenshot/houseinfofail.png')\n>   \t\t\tallure.attach.file('./report/screenshot/houseinfofail.png',attachment_type = allure.attachment_type.PNG)\n\ntestcases\\test_user_manager\\test_login.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\allure_commons\\_allure.py:203: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nvenv\\lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\lib\\site-packages\\allure_pytest\\listener.py:233: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\lib\\site-packages\\allure_commons\\reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nvenv\\lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nvenv\\lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\lib\\site-packages\\allure_commons\\logger.py:53: in report_attached_file\n    shutil.copy2(source, destination)\nD:\\Program Files\\python3.10\\lib\\shutil.py:434: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = './report/screenshot/houseinfofail.png'\ndst = 'D:\\\\desktop\\\\web自动化\\\\report\\\\result\\\\bbea938f-6cc4-42fd-8a69-27c884ed6f5f-attachment.png'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: './report/screenshot/houseinfofail.png'\n\nD:\\Program Files\\python3.10\\lib\\shutil.py:254: FileNotFoundError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"FileNotFoundError: [Errno 2] No such file or directory: './report/screenshot/houseinfofail.png'","statusTrace":"self = <test_login.TestLogin object at 0x000001F36A470E20>, username = 'admin1'\npassword = 11111111, except_res = '登录失败'\n\n    @allure.story('登录功能验证')\n    @pytest.mark.parametrize('username,password,except_res' , load_user_yaml(userdata_path))\n    def test_01_login(self , username , password , except_res):\n    \tdriver=BasePage().driver\n    \tload_log().info('测试用户名{},密码{}'.format(username , password))\n    \tresult = UserLogin().userlogin(username , password)\n    \twith allure.step('执行断言'):\n    \t\ttry:\n    \t\t\tassert result == except_res\n    \t\t\tload_log().info('实际结果\"{}\"与预期结果\"{}\"一致'.format(result , except_res))\n    \t\t\tdriver.save_screenshot('./report/screenshot/houseinfofail.png')\n>   \t\t\tallure.attach.file('./report/screenshot/houseinfofail.png',attachment_type = allure.attachment_type.PNG)\n\ntestcases\\test_user_manager\\test_login.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons._allure.Attach object at 0x000001F3688281F0>\nsource = './report/screenshot/houseinfofail.png', name = None\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\n\n    def file(self, source, name=None, attachment_type=None, extension=None):\n>       plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n\nvenv\\lib\\site-packages\\allure_commons\\_allure.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_HookCaller 'attach_file'>, args = ()\nkwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './report/screenshot/houseinfofail.png'}\nargname = 'extension', firstresult = False\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\nvenv\\lib\\site-packages\\pluggy\\_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._manager.PluginManager object at 0x000001F368849CF0>\nhook_name = 'attach_file'\nmethods = [<HookImpl plugin_name='2144942744352', plugin=<allure_pytest.listener.AllureListener object at 0x000001F3688CE320>>]\nkwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\nvenv\\lib\\site-packages\\pluggy\\_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'attach_file'\nhook_impls = [<HookImpl plugin_name='2144942744352', plugin=<allure_pytest.listener.AllureListener object at 0x000001F3688CE320>>]\ncaller_kwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\nvenv\\lib\\site-packages\\pluggy\\_callers.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._result._Result object at 0x000001F36AE7DF30>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n>           raise ex[1].with_traceback(ex[2])\n\nvenv\\lib\\site-packages\\pluggy\\_result.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'attach_file'\nhook_impls = [<HookImpl plugin_name='2144942744352', plugin=<allure_pytest.listener.AllureListener object at 0x000001F3688CE320>>]\ncaller_kwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\nvenv\\lib\\site-packages\\pluggy\\_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_pytest.listener.AllureListener object at 0x000001F3688CE320>\nsource = './report/screenshot/houseinfofail.png', name = None\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\n\n    @allure_commons.hookimpl\n    def attach_file(self, source, name, attachment_type, extension):\n>       self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n\nvenv\\lib\\site-packages\\allure_pytest\\listener.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.reporter.AllureReporter object at 0x000001F3688CE350>\nuuid = '342b36cc-4aea-4e53-92e2-b384af581d44'\nsource = './report/screenshot/houseinfofail.png', name = None\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\nparent_uuid = None\n\n    def attach_file(self, uuid, source, name=None, attachment_type=None, extension=None, parent_uuid=None):\n        file_name = self._attach(uuid, name=name, attachment_type=attachment_type,\n                                 extension=extension, parent_uuid=parent_uuid)\n>       plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n\nvenv\\lib\\site-packages\\allure_commons\\reporter.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_HookCaller 'report_attached_file'>, args = ()\nkwargs = {'file_name': '342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png', 'source': './report/screenshot/houseinfofail.png'}\nargname = 'file_name', firstresult = False\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\nvenv\\lib\\site-packages\\pluggy\\_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._manager.PluginManager object at 0x000001F368849CF0>\nhook_name = 'report_attached_file'\nmethods = [<HookImpl plugin_name='2144942196048', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001F368848550>>]\nkwargs = {'file_name': '342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png', 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\nvenv\\lib\\site-packages\\pluggy\\_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'report_attached_file'\nhook_impls = [<HookImpl plugin_name='2144942196048', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001F368848550>>]\ncaller_kwargs = {'file_name': '342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png', 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\nvenv\\lib\\site-packages\\pluggy\\_callers.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._result._Result object at 0x000001F36AE7DE40>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n>           raise ex[1].with_traceback(ex[2])\n\nvenv\\lib\\site-packages\\pluggy\\_result.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'report_attached_file'\nhook_impls = [<HookImpl plugin_name='2144942196048', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001F368848550>>]\ncaller_kwargs = {'file_name': '342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png', 'source': './report/screenshot/houseinfofail.png'}\nfirstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\nvenv\\lib\\site-packages\\pluggy\\_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.logger.AllureFileLogger object at 0x000001F368848550>\nsource = './report/screenshot/houseinfofail.png'\nfile_name = '342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png'\n\n    @hookimpl\n    def report_attached_file(self, source, file_name):\n        destination = os.path.join(self._report_dir, file_name)\n>       shutil.copy2(source, destination)\n\nvenv\\lib\\site-packages\\allure_commons\\logger.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = './report/screenshot/houseinfofail.png'\ndst = 'D:\\\\desktop\\\\web自动化\\\\report\\\\result\\\\342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png'\n\n    def copy2(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data and metadata. Return the file's destination.\n    \n        Metadata is copied with copystat(). Please see the copystat function\n        for more information.\n    \n        The destination may be a directory.\n    \n        If follow_symlinks is false, symlinks won't be followed. This\n        resembles GNU's \"cp -P src dst\".\n        \"\"\"\n        if os.path.isdir(dst):\n            dst = os.path.join(dst, os.path.basename(src))\n>       copyfile(src, dst, follow_symlinks=follow_symlinks)\n\nD:\\Program Files\\python3.10\\lib\\shutil.py:434: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = './report/screenshot/houseinfofail.png'\ndst = 'D:\\\\desktop\\\\web自动化\\\\report\\\\result\\\\342b36cc-4aea-4e53-92e2-b384af581d44-attachment.png'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: './report/screenshot/houseinfofail.png'\n\nD:\\Program Files\\python3.10\\lib\\shutil.py:254: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_login.TestLogin object at 0x000001F36A470E20>, username = 'admin1'\npassword = 11111111, except_res = '登录失败'\n\n    @allure.story('登录功能验证')\n    @pytest.mark.parametrize('username,password,except_res' , load_user_yaml(userdata_path))\n    def test_01_login(self , username , password , except_res):\n    \tdriver=BasePage().driver\n    \tload_log().info('测试用户名{},密码{}'.format(username , password))\n    \tresult = UserLogin().userlogin(username , password)\n    \twith allure.step('执行断言'):\n    \t\ttry:\n    \t\t\tassert result == except_res\n    \t\t\tload_log().info('实际结果\"{}\"与预期结果\"{}\"一致'.format(result , except_res))\n    \t\t\tdriver.save_screenshot('./report/screenshot/houseinfofail.png')\n    \t\t\tallure.attach.file('./report/screenshot/houseinfofail.png',attachment_type = allure.attachment_type.PNG)\n    \n    \t\texcept:\n    \n    \t\t\tdriver.save_screenshot('./report/screenshot/houseinfofail.png')\n>   \t\t\tallure.attach.file('./report/screenshot/houseinfofail.png',attachment_type = allure.attachment_type.PNG)\n\ntestcases\\test_user_manager\\test_login.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\allure_commons\\_allure.py:203: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nvenv\\lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\lib\\site-packages\\allure_pytest\\listener.py:233: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\lib\\site-packages\\allure_commons\\reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nvenv\\lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nvenv\\lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\lib\\site-packages\\allure_commons\\logger.py:53: in report_attached_file\n    shutil.copy2(source, destination)\nD:\\Program Files\\python3.10\\lib\\shutil.py:434: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = './report/screenshot/houseinfofail.png'\ndst = 'D:\\\\desktop\\\\web自动化\\\\report\\\\result\\\\bbea938f-6cc4-42fd-8a69-27c884ed6f5f-attachment.png'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: './report/screenshot/houseinfofail.png'\n\nD:\\Program Files\\python3.10\\lib\\shutil.py:254: FileNotFoundError","steps":[{"name":"执行断言","time":{"start":1675070970657,"stop":1675070971521,"duration":864},"status":"broken","statusMessage":"FileNotFoundError: [Errno 2] No such file or directory: './report/screenshot/houseinfofail.png'\n","statusTrace":"  File \"D:\\desktop\\web自动化\\testcases\\test_user_manager\\test_login.py\", line 29, in test_01_login\n    allure.attach.file('./report/screenshot/houseinfofail.png',attachment_type = allure.attachment_type.PNG)\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 203, in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\pluggy\\_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\pluggy\\_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\pluggy\\_callers.py\", line 60, in _multicall\n    return outcome.get_result()\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\pluggy\\_result.py\", line 60, in get_result\n    raise ex[1].with_traceback(ex[2])\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\allure_pytest\\listener.py\", line 233, in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\allure_commons\\reporter.py\", line 160, in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\pluggy\\_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\pluggy\\_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\pluggy\\_callers.py\", line 60, in _multicall\n    return outcome.get_result()\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\pluggy\\_result.py\", line 60, in get_result\n    raise ex[1].with_traceback(ex[2])\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\desktop\\web自动化\\venv\\lib\\site-packages\\allure_commons\\logger.py\", line 53, in report_attached_file\n    shutil.copy2(source, destination)\n  File \"D:\\Program Files\\python3.10\\lib\\shutil.py\", line 434, in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n  File \"D:\\Program Files\\python3.10\\lib\\shutil.py\", line 254, in copyfile\n    with open(src, 'rb') as fsrc:\n","steps":[],"attachments":[{"type":"image/png","size":0},{"type":"image/png","size":0}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[{"uid":"13941eb05ee362d9","name":"log","source":"13941eb05ee362d9.txt","type":"text/plain","size":158}],"parameters":[],"hasContent":true,"stepsCount":1,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[],"labels":[{"name":"feature","value":"登录功能"},{"name":"story","value":"登录功能验证"},{"name":"parentSuite","value":"testcases.test_user_manager"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"Capulele"},{"name":"thread","value":"424-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_user_manager.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"except_res","value":"'登录失败'"},{"name":"password","value":"11111111"},{"name":"username","value":"'admin1'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"50b501069966ac1.json","parameterValues":["'登录失败'","11111111","'admin1'"]}